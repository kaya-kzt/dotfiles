[[plugins]] # enable to do git operation in vim
repo = 'tpope/vim-fugitive'
on_event = 'VimEnter'
hook_add = '''
nnoremap [git]  <Nop>
nmap <space>g [git]
nnoremap <silent> [git]s :Gstatus<CR><C-w>T
nnoremap <silent> [git]a :Gwrite<CR>
nnoremap <silent> [git]c :Gcommit<CR>
nnoremap <silent> [git]b :Gblame<CR>
nnoremap <silent> [git]d :Gdiff<CR>
nnoremap <silent> [git]m :Gmerge<CR>
'''

[[plugins]] # git-messenger shows message from last commit
repo = 'rhysd/git-messenger.vim'
on_event = 'BufReadPost'
hook_add = '''
let g:git_messenger_no_default_mappings=v:true
nnoremap <silent> [git]gm :GitMessenger<CR>
'''

[[plugins]] # get recent buffer in denite.vim
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]] # get yank history in denite.vim
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']
# on_path = '.*'

[[plugins]] # vim emoji support
repo = 'junegunn/vim-emoji'

[[plugins]] # vim emoji support for denite
repo = 'pocari/vim-denite-emoji'
depends = ['vim-emoji']
on_source = ['denite.nvim']

[[plugins]] # for file search + open
repo = 'Shougo/denite.nvim'
# depends = ['neomru.vim', 'neoyank.vim']
hook_source = '''
if executable('rg')
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--hidden', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
else
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', [])
  call denite#custom#var('grep', 'default_opts',
        \ ['--nocolor', '--nogroup'])
endif

call denite#custom#alias('source', 'file/git', 'file/rec')
call denite#custom#var('file/git', 'command',
      \ ['git', 'ls-files', '-c', '--exclude-standard'])

let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7

call denite#custom#option('default', {
      \ 'prompt': '>',
      \ 'source_names': 'short',
      \ 'auto_resize': v:false,
      "\ 'start_filter': v:true,
      \ 'split': "floating",
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'filter_split_direction': "aboveleft",
      \ })

call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', 'build/', '*.make', '*.o', '*.exe', '.ropeproject/',
      \ '__pycache__/', 'bin/', 'venv/', 'images/', '*.min.*',
      \ 'img/', 'fonts/', 'vendor/'])
'''
hook_add = '''
nnoremap [denite] <Nop>
nmap <Space>u [denite]
nnoremap <silent> [denite]t :Denite filetype <CR>
nnoremap <silent> [denite]v :Denite file/git <CR>
nnoremap <silent> [denite]f :Denite file/rec <CR>
nnoremap <silent> [denite]h :Denite file_mru <CR>
nnoremap <silent> [denite]d :Denite directory_rec <CR>
nnoremap <silent> [denite]r :Denite directory_mru <CR>
nnoremap <silent> [denite]l :Denite line <CR>
nnoremap <silent> [denite]g :Denite grep -buffer-name=grep-buffer-denite <CR>
nnoremap <silent> [denite]c :Denite change <CR>
nnoremap <silent> [denite]o :Denite -split=vertical -winwidth=64 -auto-resize outline <CR>
nnoremap <silent> [denite]] :DeniteCursorWord grep <CR>
nnoremap <silent> [denite]b :Denite buffer <CR>
nnoremap <silent> [denite]j :Denite jump <CR>
nnoremap <silent> [denite]y :Denite neoyank <CR>
nnoremap <silent> [denite]e :Denite emoji <CR>
nnoremap <silent> [denite]u :Denite -resume <CR>
nnoremap <silent> [denite]n :Denite -buffer-name=grep-buffer-denite -resume -immediately -cursor_pos=+1 <CR>
nnoremap <silent> [denite]p :Denite -buffer-name=grep-buffer-denite -resume -immediately -cursor_pos=-1 <CR>

" denite key map
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <Esc>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-t>   denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-h>   denite#do_map('move_up_path')
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer><expr> <C-h>   denite#do_map('move_up_path')
    inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
endfunction

" transparent denite window
" augroup transparent-windows
"   autocmd!
"   autocmd FileType denite set winblend=10
"   autocmd FileType denite-filter set winblend=10
" augroup END

" if has('nvim')
" autocmd FileType denite call s:denite_change_cursorline()
" function! s:denite_change_cursorline() abort
"   let output = execute('hi Cursorline')
"   let guibg = matchstr(output, '\(guibg=\)\@<=#[a-zA-Z0-9]\+')
"   hi CursorLine guibg=yellow
"   execute 'autocmd BufLeave <buffer> hi Cursorline guibg=' . guibg
" endfunction
" endif
'''

# LSP

# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# on_event = 'VimEnter'

# [[plugins]] # a vim client for language server protocol (LSP)
# repo = 'prabirshrestha/vim-lsp'
# depends = ['async.vim']
# on_event = 'VimEnter'
# hook_add = '''
# let g:pyls_path = $PYENV_ROOT . '/shims/pyls' "reffer pyls in pyenv.
# if executable('pyls')
#     autocmd User lsp_setup call lsp#register_server({
#        \ 'name': 'pyls',
#        \ 'cmd': {server_info->['pyls']},
#        \ 'whitelist': ['python'],
#        \ 'priority': 2,
#        \ 'workspace_config': {'pyls': {'plugins': {'pydocstyle': {'enabled': v:true}}}}
#        \ })
#     autocmd FileType python setlocal omnifunc=lsp#complete
# endif
#
# if executable('gopls')
#     au User lsp_setup call lsp#register_server({
#       \ 'name': 'gopls',
#       \ 'cmd': {server_info->['gopls']},
#       \ 'whitelist': ['go'],
#       \ 'priority': 2,
#       \ })
#     autocmd FileType go setlocal omnifunc=lsp#complete
# endif
#
# if executable('rls')
#     au User lsp_setup call lsp#register_server({
#        \ 'name': 'rls',
#        \ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
#        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Cargo.toml'))},
#        \ 'whitelist': ['rust'],
#        \ 'priority': 2,
#        \ })
#     autocmd FileType rust setlocal omnifunc=lsp#complete
# endif
#
# let g:lsp_auto_enable = 1
# let g:lsp_diagnostics_enabled = 0
#
# " setlocal omnifunc=lsp#complete
# autocmd Filetype * nnoremap <buffer> <Leader>d :<C-u>LspDefinition<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>R :<C-u>LspReferences<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>s :<C-u>LspDocumentSymbol<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>S :<C-u>LspWorksspaceSymbol<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>f :<C-u>LspDocumentFormat<CR>
# autocmd Filetype * vnoremap <buffer> <Leader>F :LspDocumentRangeFormat<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>h :<C-u>LspHover<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>i :<C-u>LspImplementation<CR>
# autocmd Filetype * nnoremap <buffer> <Leader>r :<C-u>LspRename<CR>
# '''

# Completion

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
merged = 0
on_event = 'VimEnter'
hook_add = '''
" change completion window behaviors
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

augroup cocfunc
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " format settings
  autocmd BufWritePre *.py CocFormatBuf
  autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
  autocmd BufWritePre *.go CocFormatBuf

augroup end

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `:CocFormatBuf` to format current buffer
command! -nargs=0 CocFormatBuf :call CocAction('format')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
set statusline^=%{coc#status()}

" coc keymaps
nmap [coc] <Nop>
map <C-k> [coc]
nmap <silent> [coc]<C-f> :<C-u>CocFormatBuf<cr>
nmap <silent> [coc]f     <Plug>(coc-format-selected)
xmap <silent> [coc]f     <Plug>(coc-format-selected)
nmap <silent> [coc]p     <Plug>(coc-diagnostic-prev)
nmap <silent> [coc]n     <Plug>(coc-diagnostic-next)
nmap <silent> [coc]x     <Plug>(coc-fix-current)
nmap <silent> [coc]d     :<C-u>CocList diagnostics<cr>
nmap <silent> [coc]r     <Plug>(coc-rename)
nmap <silent> [coc]h     :call CocAction('doHover')<cr>
nmap <silent> [coc]o     :<C-u>CocList outline<cr>
nmap <silent> [coc]y     :<C-u>CocList -I symbols<cr>

nmap <silent> [coc]K     :call <SID>show_documentation()<CR>

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gh :call CocAction('doHover')<cr>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
'''

# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# depends = ['deoplete.nvim']
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# on_event = 'InsertEnter'
# depends = ['context_filetype.vim']
# hook_source = '''
# imap <C-e> <Plug>(neosnippet_expand_or_jump)
# smap <C-e> <Plug>(neosnippet_expand_or_jump)
# xmap <C-e> <Plug>(neosnippet_expand_target)
#
# smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#
# " if has('conceal')
# "   set conceallevel=2 concealcursor=niv
# " endif
# let g:neosnippet#snippets_directory = '~/.config/dotfiles/snippets'
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# on_event = 'InsertEnter'
# depends = ['neosnippet.vim']

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'BufEnter'
hook_source = '''
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories = ["~/.config/dotfiles/snippets"]

let g:ultisnips_python_syle = "google"
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_event = 'BufEnter'
depends = ['ultisnips']

[[plugins]] # Auto close parentheses
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_add = '''
"call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
"call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
"call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

[[plugins]] # enable to buffer execution on vim
repo = 'thinca/vim-quickrun'
on_event = 'BufEnter'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner'    : 'vimproc',
      \ 'runner/vimproc/updatetime' : 40,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }

" q: close quickfix
au FileType qf nnoremap <silent><buffer>q :quit<CR>
" \r: save and execute quickrun (excluding go file type)
let g:quickrun_no_default_key_mappings = 1
autocmd Filetype * nnoremap <buffer> <Leader><Leader> :cclose<CR>:write<CR>:QuickRun -mode n<CR>
" autocmd Filetype * if &ft!="go"|nnoremap <buffer> <Leader><Leader> :cclose<CR>:write<CR>:QuickRun -mode n<CR>|endif
autocmd Filetype * xnoremap <buffer> <Leader><Leader> :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
" nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
" xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
" C-c: stop quickrun
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<Leader><C-c>"
'''

# Lint

# [[plugins]] # Golang syntax+lint
# repo = 'fatih/vim-go'
# on_event = 'VimEnter'
# on_ft = 'go'
# hook_add = '''
# let g:go_test_timeout = '10s'
#
# let g:go_highlight_functions = 1
# let g:go_highlight_methods = 1
# let g:go_highlight_fields = 1
# let g:go_highlight_types = 1
# let g:go_highlight_operators = 1
# let g:go_highlight_build_constraints = 1
# let g:go_term_mode = 'split'
# let g:go_version_warning = 0
#
# let g:go_auto_type_info = 0
# let g:go_auto_sameids = 1
#
# let g:go_fmt_command = 'goimports'
# let g:go_def_mode = 'gopls'
# let g:go_def_mapping_enabled = 0
#
# autocmd FileType go nmap <Leader>r  <Plug>(go-run)
# autocmd FileType go nmap <Leader>t  <Plug>(go-test)
# " autocmd FileType go nmap <Leader>b :<C-u>call <SID>build_go_files()<CR>
# autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
# " autocmd FileType go nmap <Leader>i <Plug>(go-info)
# " autocmd FileType go nmap <leader>s <Plug>(go-def-split)
# " autocmd FileType go nmap <leader>v <Plug>(go-def-vertical)
# autocmd Filetype go command! -bang GoA call go#alternate#Switch(<bang>0, 'edit')
# autocmd Filetype go command! -bang GoAV call go#alternate#Switch(<bang>0, 'vsplit')
# autocmd Filetype go command! -bang GoAS call go#alternate#Switch(<bang>0, 'split')
# autocmd Filetype go command! -bang GoAT call go#alternate#Switch(<bang>0, 'tabe')
# '''

[[plugins]] # Simpler golang support plugin
repo = 'arp242/gopher.vim'
on_event = 'BufEnter'
on_ft = 'go'
hook_add = '''
command GoBuild :setl makeprg=go\ build | :make
command GoRun :setl makeprg=go\ run | :make %:h/*.go
command GoTest :compiler gotest | :make

autocmd FileType go nnoremap <Leader>b :GoBuild<CR>
autocmd FileType go nnoremap <Leader>r :GoRun<CR>
autocmd FileType go nnoremap <Leader>t :GoTest<CR>
autocmd FileType go nnoremap <Leader>c :GoCoverage toggle<CR>
'''

[[plugins]] # Neovim/Vim integration for Delve
repo = 'sebdah/vim-delve'
on_event = 'BufEnter'
on_ft = 'go'
hook_add = '''
autocmd FileType go nnoremap <Leader>d :DlvDebug<CR>
autocmd FileType go nnoremap <Leader>p :DlvToggleBreakpoint<CR>
'''

# Display

[[plugins]] # swhitch buffer file type according to cursor position
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_event = 'VimEnter'
hook_add ='''
let g:precious_enable_switch_CursorMoved = { '*': 1, 'help': 1 }
let g:precious_enable_switch_CursorMoved_i = { '*': 1, 'help': 1 }
autocmd MyAutoCmd InsertEnter * :PreciousSwitch
autocmd MyAutoCmd InsertLeave * :PreciousReset
'''

# Other

[[plugins]] # enhance text object
repo = 'tpope/vim-surround'
on_event = 'CursorMoved'

[[plugins]] # plugin for GoDecls command in vim-go
repo = 'ctrlpvim/ctrlp.vim'
on_event = 'BufEnter'

[[plugins]] # highlights trailing whitespace
repo = 'bronson/vim-trailing-whitespace'
on_event = 'VimEnter'
hook_add = '''
" delete white_space at end of line when file was saved.
autocmd BufWritePre * :FixWhitespace
'''

[[plugins]] # plugin for alignment words
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]] # a plugin for using web-api in vim
repo = 'mattn/webapi-vim'

[[plugins]] # for using gist services
repo = 'mattn/gist-vim'
depends = ['webapi-vim']
on_cmd = 'Gist'

[[plugins]] # for visualize indent
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'VimEnter'
hook_add = '''
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'denite']
"IndentGuidesEnable
'''

[[plugins]] # auto insert space around '=' & ','
repo = 'kana/vim-smartchr'
on_event = 'InsertCharPre'
hook_add = '''
" inoremap <expr> , smartchr#loop(', ', ',')
" inoremap <expr> . smartchr#loop('.', '. ', '..', '...')
inoremap <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
inoremap <expr> ! smartchr#loop('!', '!!', ' != ')
inoremap <expr> : smartchr#loop(':', ': ', ' := ')
inoremap <expr> + smartchr#loop('+', ' + ', '++')
inoremap <expr> - smartchr#loop('-', ' - ', '--')
inoremap <expr> * smartchr#loop('*', ' * ')
inoremap <expr> / smartchr#loop('/', ' / ', '// ')
inoremap <expr> & smartchr#loop('&', ' & ', ' && ')
" inoremap <expr> | smartchr#loop('|', ' | ', ' || ')
'''

[[plugins]] # comment out / decomment plugin
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
on_event = 'BufEnter'
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <C-_>
      silent! xunmap <C-_>
      " silent! nunmap <buffer> gc
      " silent! xunmap <buffer> gc
      " silent! nunmap <buffer> gcc
      " silent! xunmap <buffer> gcc
    else
      " nmap <buffer> gcc <Plug>(caw:prefix)
      " xmap <buffer> gcc <Plug>(caw:prefix)
      " nmap <buffer> gc <Plug>(caw:hatpos:toggle)
      " xmap <buffer> gc <Plug>(caw:hatpos:toggle)
      nmap <C-_> <Plug>(caw:hatpos:toggle)
      xmap <C-_> <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]] # for enabling display & edit binary file in vim
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]] # for sorting python file import line, command ':PyImportSort!'
repo = 'tweekmonster/impsort.vim'
on_ft = 'py'
on_cmd = 'PyImportSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]] # for url open in browser & search word
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
on_event = 'BufEnter'
hook_add = '''
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'md'

[[plugins]] # for realtime preview for Markdown Documents
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
on_ft = 'md'
on_event = 'BufEnter'
depends = ['vim-markdown', 'open-browser.vim']
hook_add = '''
let g:vim_markdown_conceal=0
let g:vim_markdown_folding_disabled=1
'''

[[plugins]] # Continuously updated session files
repo = 'tpope/vim-obsession'
on_cmd = 'Obsession'

[[plugins]] # call :Template to get template each file types
repo = 'mattn/sonictemplate-vim'
on_cmd = 'Template'

[[plugins]] # vim doc in japanese
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
on_event = 'BufEnter'
hook_add = '''
set helplang=ja,en
'''

