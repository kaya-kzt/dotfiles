[[plugins]] # get recent buffer in denite.vim
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]] # get yank history in denite.vim
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']
# on_path = '.*'

[[plugins]] # vim emoji support
repo = 'junegunn/vim-emoji'

[[plugins]] # vim emoji support for denite
repo = 'pocari/vim-denite-emoji'
depends = ['vim-emoji']
on_source = ['denite.nvim']

[[plugins]] # for file search + open
repo = 'Shougo/denite.nvim'
# depends = ['neomru.vim', 'neoyank.vim']
hook_source = '''
if executable('rg')
  call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--hidden', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])
else
  call denite#custom#var('file_rec', 'command',
        \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', [])
  call denite#custom#var('grep', 'default_opts',
        \ ['--nocolor', '--nogroup'])
endif

call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

call denite#custom#option('default', {
      \ 'auto_accel': v:true,
      \ 'prompt': '>',
      \ 'source_names': 'short',
      \ })

call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', 'build/', '*.make', '*.o', '.ropeproject/', '__pycache__/', 'bin/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''
hook_add = '''
nnoremap [denite] <Nop>
nmap <Space>u [denite]
nnoremap <silent> [denite]t :Denite filetype -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]f :Denite file_rec -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]v :Denite file_rec/git -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]l :Denite line -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]g :Denite grep -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]c :Denite change -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]o :Denite -split=vertical -winwidth=48 outline -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]] :DeniteCursorWord grep -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]b :Denite buffer -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]j :Denite jump -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]h :Denite file_mru -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]y :Denite neoyank -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]e :Denite emoji -highlight-mode-insert=Search<CR>
nnoremap <silent> [denite]u :Denite -resume<CR>
nnoremap <silent> [denite]n :Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
nnoremap <silent> [denite]p :Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
'''

[[plugins]] # completion provider for nvim
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
depends = 'context_filetype.vim'
on_event = 'InsertCharPre'
# on_event = 'InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 10
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 10000
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
      \ neosnippet#expandable_or_jumpable() ?
      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
imap <C-e> <Plug>(neosnippet_expand_or_jump)
smap <C-e> <Plug>(neosnippet_expand_or_jump)
xmap <C-e> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
let g:neosnippet#snippets_directory = '~/.config/dotfiles/snippets'
'''
on_i  = 1
# on_ft = ['snippet']
depends = ['neosnippet-snippets']

# [[plugins]] # provides LSP completion source for deoplete
# repo = 'Shougo/deoplete-lsp'
# on_i = 1
# depends = ['deoplete.nvim']
# hook_add = '''
# call lsp#server#add('python', 'pyls')
# '''

[[plugins]] # python completion
repo = 'zchee/deoplete-jedi'
on_i  = 1
depends = ['deoplete.nvim']
on_ft = 'python'
hook_add = '''
let g:deoplete#sources#jedi#show_docstring = 1
'''

# [[plugins]]
# repo = 'shawncplus/phpcomplete.vim'
# on_i  = 1
# on_ft = 'php'

[[plugins]] # golang completion
repo = 'zchee/deoplete-go'
build = 'make'
depends = ['deoplete.nvim']
on_ft = 'go'
hook_add = '''
" let g:deoplete#sources#go#align_class = 1
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#package_dot = 0
let g:deoplete#sources#go#pointer = 1
let g:deoplete#sources#go#source_importer = 0
let g:deoplete#sources#go#builtin_objects = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
" let g:deoplete#sources#go#cgo = 1
" let g:deoplete#sources#go#cgo#std = "c11"
let g:deoplete#sources#go#auto_goos = 1
'''

[[plugins]] # rust standard library completion
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_add = '''
set hidden
let g:racer_cmd = "$HOME/.cargo/bin/racer"
let g:rustfmt_autosave = 1
let g:rustfmt_command = "$HOME/.cargo/bin/rustfmt"
let g:rust_doc#downloaded_rust_doc_dir = $RUST_ROOT
'''

[[plugins]] # Auto close parentheses
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_add = '''
"call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
"call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
"call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

[[plugins]] # enable to buffer execution on vim
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner'    : 'vimproc',
      \ 'runner/vimproc/updatetime' : 40,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
let g:quickrun_config["python"] = {"command": "python3"}

" q: close quickfix
au FileType qf nnoremap <silent><buffer>q :quit<CR>
" \r: save and execute quickrun (excluding go file type)
let g:quickrun_no_default_key_mappings = 1
autocmd Filetype * if &ft!="go"|nnoremap <buffer> <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>|endif
autocmd Filetype * if &ft!="go"|xnoremap <buffer> <Leader>r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>|endif
" nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
" xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
" C-c: stop quickrun
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<Leader><C-c>"
'''

# Lint

# Neomake -> ALE
# [[plugins]] # lint provider
# repo = 'neomake/neomake'
# hook_add = '''
# autocmd! BufWritePost * Neomake
# let g:neomake_open_list = 2
#
# " Python Lint using flake8
# let g:neomake_python_enabled_makers = ['python', 'flake8']
# let g:neomake_python_flake8_maker = {
#     \ 'args': ['--ignore=E111,E114,E501',  '--format=default'],
#     \ 'errorformat':
#         \ '%E%f:%l: could not compile,%-Z%p^,' .
#         \ '%A%f:%l:%c: %t%n %m,' .
#         \ '%A%f:%l: %t%n %m,' .
#         \ '%-G%.%#',
#     \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
#     \ }
# " Rust Lint using clippy
# augroup NeomakeRustConfig
#   autocmd!
#   autocmd BufWritePost *.rs Neomake! clippy
# augroup END
# '''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]] # Golang syntax+lint
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_term_mode = 'split'
let g:go_version_warning = 0

let g:go_auto_type_info = 0
let g:go_auto_sameids = 1

let g:go_fmt_command = 'goimports'
" let s:goargs = go#package#ImportPath(expand('%:p:h'))
let g:neomake_go_errcheck_maker = {
  \ 'args': ['-abspath'],
  \ 'append_file': 0,
  \ 'errorformat': '%f:%l:%c:\ %m, %f:%l:%c\ %#%m',
  \ }
let g:neomake_go_enabled_makers = ['golint', 'govet', 'errcheck']
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <Leader>r  <Plug>(go-run)
autocmd FileType go nmap <Leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>i <Plug>(go-info)
autocmd FileType go nmap <leader>s <Plug>(go-def-split)
autocmd FileType go nmap <leader>v <Plug>(go-def-vertical)
autocmd Filetype go command! -bang GoA call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang GoAV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang GoAS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang GoAT call go#alternate#Switch(<bang>0, 'tabe')
'''

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
let g:user_emmet_mode = 'i'
let g:user_emmet_leader_key='<C-E>' # <C-E-,>
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {
\   'variables': {
\       'lang': "ja"
\   },
\   'indentation': '    '
\}
'''

# go lint was included in vim-go at syntax section.


# Display

[[plugins]] # swhitch buffer file type according to cursor position
repo = 'Shougo/context_filetype.vim'

[[plugins]] # swhitch buffer file type according to cursor position
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add ='''
let g:precious_enable_switch_CursorMoved = { '*': 1, 'help': 1 }
let g:precious_enable_switch_CursorMoved_i = { '*': 1, 'help': 1 }
autocmd MyAutoCmd InsertEnter * :PreciousSwitch
autocmd MyAutoCmd InsertLeave * :PreciousReset
'''

# Other

[[plugins]] # a plugin for using web-api in vim
repo = 'mattn/webapi-vim'

[[plugins]] # for using gist services
repo = 'mattn/gist-vim'
depends = ['webapi-vim']
on_cmd = 'Gist'

[[plugins]] # for visualize indent
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'InsertEnter'
hook_add = '''
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'denite']
"IndentGuidesEnable
'''

[[plugins]] # auto insert space around '=' & ','
repo = 'kana/vim-smartchr'
on_event = 'InsertEnter'
hook_add = '''
" inoremap <expr> , smartchr#loop(', ', ',')
" inoremap <expr> . smartchr#loop('.', '. ', '..', '...')
inoremap <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
inoremap <expr> ! smartchr#loop('!', '!!', ' != ')
inoremap <expr> : smartchr#loop(':', ': ', ' := ')
inoremap <expr> + smartchr#loop('+', ' + ', '++')
inoremap <expr> - smartchr#loop('-', ' - ', '--')
inoremap <expr> * smartchr#loop('*', ' * ')
inoremap <expr> / smartchr#loop('/', ' / ', '// ')
inoremap <expr> & smartchr#loop('&', ' & ', ' && ')
" inoremap <expr> | smartchr#loop('|', ' | ', ' || ')
'''

# [[plugins]] # show tag structure in file
# repo = 'majutsushi/tagbar'
# hook_add = '''
# let g:tagbar_width = 30
# let g:tagbar_autoshowtag = 1
# '''

[[plugins]] # comment out / decomment plugin
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      " silent! nunmap <buffer> gcc
      " silent! xunmap <buffer> gcc
    else
      " nmap <buffer> gcc <Plug>(caw:prefix)
      " xmap <buffer> gcc <Plug>(caw:prefix)
      nmap <buffer> gc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

# [[plugins]] # multi byte chars selection support in Visual Mode
# repo = 'kana/vim-niceblock'
# on_map = {x = '<Plug>'}
# hook_add = '''
#   xmap I  <Plug>(niceblock-I)
#   xmap A  <Plug>(niceblock-A)
# '''

[[plugins]] # for enabling display & edit binary file in vim
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]] # Calendar plugin for vim
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'

[[plugins]] # for sorting python file import line, command ':PyImportSort!'
repo = 'tweekmonster/impsort.vim'
on_ft = 'py'
on_cmd = 'PyImportSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]] # for url open in browser & search word
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
hook_add = '''
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]] # for realtime preview for Markdown Documents
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
on_ft = 'md'
depends = ['open-browser.vim']

[[plugins]] # Continuously updated session files
repo = 'tpope/vim-obsession'
on_cmd = 'Obsession'

[[plugins]] # call :Template to get template each file types
repo = 'mattn/sonictemplate-vim'
on_cmd = 'Template'


[[plugins]] # vim doc in japanese
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
set helplang=ja,en
'''

