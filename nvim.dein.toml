[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
command! DeinUpdate  call s:dein_update()
function! s:dein_update()
  call dein#update()
  Denite dein_log:!
endfunction
'''

[[plugins]] # enable to do git operation in vim
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [fugitive]  <Nop>
nmap <space>g [fugitive]
nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
nnoremap <silent> [fugitive]a :Gwrite<CR>
nnoremap <silent> [fugitive]c :Gcommit<CR>
nnoremap <silent> [fugitive]b :Gblame<CR>
nnoremap <silent> [fugitive]d :Gdiff<CR>
nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]] # show status line
repo = 'vim-airline/vim-airline'
depends = ['tagbar', 'vim-fugitive']
hook_add = '''
let g:airline_powerline_fonts = 0
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
'''
# source ~/.config/nvim/plugins/airline.rc.vim

#[[plugins]] # for airline color theme
#repo = 'vim-airline/vim-airline-themes'
#depends = 'vim-airline'
#hook_add = '''
#let g:airline_theme='luna'
#'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# Syntax

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'
hook_add = '''
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
'''

[[plugins]] # Html5
repo  = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

#[[plugins]]
#repo = 'stephenway/postcss.vim'
#on_ft = 'css'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'js'

[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = 'php'
hook_add = '''
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END
'''

# go-lang syntax provides vim-go at lint section.

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'

[[plugins]]
repo = 'LaTeX-Box-Team/LaTeX-Box'
on_ft = ['tex', 'latex']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd', 'md', ]
hook_add = '''
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
'''

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yml', 'yaml']

[[plugins]]
repo = 'pearofducks/ansible-vim'
on_ft = ['yml', 'yaml']

[[plugins]]
repo = 'Shougo/neco-syntax'
on_ft = 'vim'

[[plugins]]
repo = 'vim-jp/autofmt'


# Colors

#[[plugins]]
#repo = 'mhartington/oceanic-next'
#hook_add = '''
#if (has("termguicolors"))
# set termguicolors
#endif
#syntax enable
#au MyAutoCmd VimEnter * nested colorscheme OceanicNext
#'''

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
let g:onedark_termcolors=256
let g:onedark_color_overrides = {
\ "comment_grey": {"gui": "#67727D", "cterm": "59", "cterm16" : "15"}
\}
colorscheme onedark
let g:airline_theme='onedark'
syntax enable
'''

# Lint

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '!'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

let g:ale_fix_on_save = 1

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8'],
\   'javascript': ['eslint'],
\   'go': ['golint', 'go build'],
\   'sh': ['shellcheck'],
\}

" let g:ale_fixers = {
"\  'python': ['yapf', 'autopep8'],
"\}

" ALE用プレフィックス
nmap [ale] <Nop>
map <C-k> [ale]
" エラー行にジャンプ
nmap <silent> [ale]<C-P> <Plug>(ale_previous)
nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

# Others

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'
hook_source = '''
let g:EditorConfig_core_mode = 'python_external'
'''

# [[plugins]] # vim alignment plugin
# repo = 'junegunn/vim-easy-align'
# hook_add = '''
# " Start interactive EasyAlign in visual mode (e.g. vipga)
# xmap ga <Plug>(EasyAlign)
# " Start interactive EasyAlign for a motion/text object (e.g. gaip)
# nmap ga <Plug>(EasyAlign)
# '''

[[plugins]] # indent based folding and motion
repo = 'pseewald/vim-anyfold'
hook_add = '''
filetype plugin indent on
syntax on
let anyfold_activate=1
set foldlevel=20
hi Folded term=NONE cterm=NONE
'''

[[plugins]] # accelerate up-down moving
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''


[[plugins]] # file manager for vim
repo = 'cocopon/vaffle.vim'
hook_add = '''
'''

# [[plugins]] # showing file tree
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# let NERDTreeShowHidden = 1
# autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
# '''
#
# [[plugins]] # making NERDTree feel like a true panel
# repo = 'jistr/vim-nerdtree-tabs'
# depends = ['nerdtree']
# hook_add = '''
# " if argc() == 0
# "   let g:nerdtree_tabs_open_on_console_startup = 1
# " end
# '''

# [[plugins]] # to showing git status in NERDTree
# repo = 'Xuyuanp/nerdtree-git-plugin'
# depends = ['nerdtree']
# hook_add = '''
# let g:NERDTreeIndicatorMapCustom = {
#     \ "Modified"  : "✹",
#     \ "Staged"    : "✚",
#     \ "Untracked" : "✭",
#     \ "Renamed"   : "➜",
#     \ "Unmerged"  : "",
#     \ "Deleted"   : "✖",
#     \ "Dirty"     : "✗",
#     \ "Clean"     : "✔︎",
#     \ 'Ignored'   : '☒',
#     \ "Unknown"   : "?"
#     \ }
# '''

[[plugins]] # enhance text object
repo = 'tpope/vim-surround'

[[plugins]] # plugin for alignment words
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]] # plugin for GoDecls command in vim-go
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]] # highlights trailing whitespace
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
" delete white_space at end of line when file was saved.
autocmd BufWritePre * :FixWhitespace
'''
